spring:
#    # 数据源
#    datasource:
#        druid:
##            driver-class-name: com.mysql.cj.jdbc.Driver
#            driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
##            url: jdbc:mysql://localhost:3306/aa.test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&nullNamePatternMatchesAll=true
#            url: jdbc:log4jdbc:mysql://localhost:3306/aa.test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&nullNamePatternMatchesAll=true
#            username: root
#            password: 123456
#            #初始化时建立物理连接的个数
#            initial-size: 5
#            #最大连接池数量
#            max-active: 20
#            #最小连接池数量
#            min-idle: 5
#            #获取连接时的最大等待时间，单位毫秒
#            max-wait: 60000
#            #是否缓存preparedStatement,mysql5.5+建议开启
#            pool-prepared-statements: true
#            #当值大于0时poolPreparedStatements会自动修改为true
#            max-pool-prepared-statement-per-connection-size: 20
#            #既作为检测的间隔时间又作为testWhileIdel执行的依据
#            time-between-eviction-runs-millis: 60000
#            #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
#            min-evictable-idle-time-millis: 300000
#            #Oracle需要打开注释
#            #validation-query: SELECT 1 FROM DUAL
#            #mysql需要打开注释
##            validation-query: select 'x'
##            validation-query: select 'x'
#            #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
#            aa.test-while-idle: true
#            #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
#            aa.test-on-borrow: false
#            #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
#            aa.test-on-return: false
#            #监控页设置
#            stat-view-servlet:
#                enabled: true
#                url-pattern: /druid/*
#                login-username: admin
#                login-password: admin
#            #扩展插件
#            filter:
#                stat:
#                    log-slow-sql: true
#                    slow-sql-millis: 1000
#                    merge-sql: false
#                wall:
#                    config:
#                        multi-statement-allow: true
    # jpa
    jpa:
        database: mysql
        database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
        hibernate:
            ddl-auto: update
        open-in-view: true
        properties:
            hibernate:
                #配置sql输出
                show_sql: true
                format_sql: true
                use_sql_comments: true
                #配置jpa批量操作
                jdbc.batch_size: 500
                jdbc.batch_versioned_data: true
                order_inserts: true
                order_updates: true



    #shardingshpere配置
    shardingsphere:
        #数据源
        datasource:
            names: db0,db1
            db0:
                type: com.zaxxer.hikari.HikariDataSource
                driver-class-name: com.mysql.cj.jdbc.Driver
                jdbc-url: jdbc:mysql://localhost:3306/db0?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&nullNamePatternMatchesAll=true
                username: root
                password: 123456
            db1:
                type: com.zaxxer.hikari.HikariDataSource
                driver-class-name: com.mysql.cj.jdbc.Driver
                jdbc-url: jdbc:mysql://localhost:3306/db1?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&nullNamePatternMatchesAll=true
                username: root
                password: 123456


        # 分库分表策略
        sharding:
            tables:
                t_order:
                    actual-data-nodes: db$->{0..1}.t_order_$->{0..2}
                    # 分库策略 根据member_id取模确定数据进哪个数据库
                    database-strategy:
                        inline:
                            sharding-column: member_id
                            algorithm-expression: db$->{member_id % 2}
                    ## 分表策略
                    # 节点 db0.t_order_0,db0.t_order_1,db0.t_order_2,db1.t_order_0,db1.t_order_1,db1.t_order_2
                    # 分表字段member_id
                    table-strategy:
                        inline:
                            sharding-column: member_id
                            # 分表策略 根据member_id取模,确定数据最终落在那个表中
                            algorithm-expression: t_order_$->{member_id % 3}
        # 拓展属性配置
        props:
            sql:
                show: true # 打印 SQL